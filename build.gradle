plugins {
    id "java"
    id "embulk-plugin-test"
}

repositories {
    mavenCentral()
}

group = "org.embulk"
version = "0.1.0-SNAPSHOT"

configurations {
    compileClasspath.resolutionStrategy.activateDependencyLocking()
    runtimeClasspath.resolutionStrategy.activateDependencyLocking()

    embulkTestImplementation.extendsFrom testImplementation
    embulkTestRuntime.extendsFrom testRuntime
}

sourceSets {
    embulkTest {
        java {
            srcDir file("src/embulkTest/java")
        }
        resources.srcDir file("src/embulkTest/resources")
    }
}

dependencies {
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.11.0"

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.11.0"

    embulkTestImplementation "org.junit.jupiter:junit-jupiter-api:5.11.0"

    embulkTestRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.11.0"
}

// A safer and strict alternative to: "dependencies" (and "dependencies --write-locks")
//
// This task fails explicitly when the specified dependency is not available.
// In contrast, "dependencies (--write-locks)" does not fail even when a part the dependencies are unavailable.
//
// https://docs.gradle.org/7.6.1/userguide/dependency_locking.html#generating_and_updating_dependency_locks
allprojects {
    task checkDependencies {
        notCompatibleWithConfigurationCache("The task \"checkDependencies\" filters configurations at execution time.")
        doLast {
            configurations.findAll { it.canBeResolved }.each { it.resolve() }
        }
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "started", "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat = org.gradle.api.tasks.testing.logging.TestExceptionFormat.FULL
        showCauses = true
        showExceptions = true
        showStackTraces = true
        showStandardStreams = true
        outputs.upToDateWhen { false }
    }
}

task embulkTest(type: Test) {
    classpath = sourceSets.embulkTest.runtimeClasspath
    testClassesDirs = sourceSets.embulkTest.output.classesDirs

    testFrameworkProperty.set(new org.embulk.junit5.EmbulkJUnitPlatformTestFramework(getFilter(), true, getDryRun()))
    testLogging {
        events "started", "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat = org.gradle.api.tasks.testing.logging.TestExceptionFormat.FULL
        showCauses = true
        showExceptions = true
        showStackTraces = true
        showStandardStreams = true
        outputs.upToDateWhen { false }
    }
}
